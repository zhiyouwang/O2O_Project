2019-07-21 13:11:36.179 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductImgDao.batchInsertProductImg] use [master] Strategy, SqlCommanType [INSERT]..
2019-07-21 13:11:36.205 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：master
2019-07-21 13:11:36.235 [main] DEBUG c.J.o2o.dao.ProductImgDao.batchInsertProductImg - ==>  Preparing: INSERT INTO tb_product_img ( img_addr, img_desc, priority, create_time, product_id ) VALUES ( ?, ?, ?, ?, ? ) , ( ?, ?, ?, ?, ? ) 
2019-07-21 13:11:36.259 [main] DEBUG c.J.o2o.dao.ProductImgDao.batchInsertProductImg - ==> Parameters: 图片1(String), 测试图片1(String), 1(Integer), 2019-07-21 13:11:36.163(Timestamp), 1(Long), 图片2(String), null, 1(Integer), 2019-07-21 13:11:36.163(Timestamp), 1(Long)
2019-07-21 13:11:36.338 [main] DEBUG c.J.o2o.dao.ProductImgDao.batchInsertProductImg - <==    Updates: 2
2019-07-21 13:11:36.363 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductImgDao.queryProductImgList] use [slave] Strategy, SqlCommanType [SELECT]..
2019-07-21 13:11:36.363 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：slave
2019-07-21 13:11:36.364 [main] DEBUG c.J.o2o.dao.ProductImgDao.queryProductImgList - ==>  Preparing: SELECT product_img_id, img_addr, img_desc, priority, create_time, product_id FROM tb_product_img WHERE product_id=? ORDER BY product_img_id ASC 
2019-07-21 13:11:36.389 [main] DEBUG c.J.o2o.dao.ProductImgDao.queryProductImgList - ==> Parameters: 1(Long)
2019-07-21 13:11:36.431 [main] DEBUG c.J.o2o.dao.ProductImgDao.queryProductImgList - <==      Total: 4
2019-07-21 13:11:36.448 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductImgDao.deleteProductImgByProductId] use [master] Strategy, SqlCommanType [DELETE]..
2019-07-21 13:11:36.448 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：master
2019-07-21 13:11:36.449 [main] DEBUG c.J.o.d.ProductImgDao.deleteProductImgByProductId - ==>  Preparing: DELETE FROM tb_product_img WHERE product_id = ? 
2019-07-21 13:11:36.449 [main] DEBUG c.J.o.d.ProductImgDao.deleteProductImgByProductId - ==> Parameters: 1(Long)
2019-07-21 13:11:36.514 [main] DEBUG c.J.o.d.ProductImgDao.deleteProductImgByProductId - <==    Updates: 4
2019-07-21 13:13:41.924 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductImgDao.queryProductImgList] use [slave] Strategy, SqlCommanType [SELECT]..
2019-07-21 13:13:41.925 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：slave
2019-07-21 13:13:41.941 [main] DEBUG c.J.o2o.dao.ProductImgDao.queryProductImgList - ==>  Preparing: SELECT product_img_id, img_addr, img_desc, priority, create_time, product_id FROM tb_product_img WHERE product_id=? ORDER BY product_img_id ASC 
2019-07-21 13:13:42.005 [main] DEBUG c.J.o2o.dao.ProductImgDao.queryProductImgList - ==> Parameters: 4(Long)
2019-07-21 13:13:42.029 [main] DEBUG c.J.o2o.dao.ProductImgDao.queryProductImgList - <==      Total: 2
2019-07-21 13:14:07.891 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductImgDao.batchInsertProductImg] use [master] Strategy, SqlCommanType [INSERT]..
2019-07-21 13:14:07.892 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：master
2019-07-21 13:14:07.923 [main] DEBUG c.J.o2o.dao.ProductImgDao.batchInsertProductImg - ==>  Preparing: INSERT INTO tb_product_img ( img_addr, img_desc, priority, create_time, product_id ) VALUES ( ?, ?, ?, ?, ? ) , ( ?, ?, ?, ?, ? ) 
2019-07-21 13:14:07.947 [main] DEBUG c.J.o2o.dao.ProductImgDao.batchInsertProductImg - ==> Parameters: 图片1(String), 测试图片1(String), 1(Integer), 2019-07-21 13:14:07.876(Timestamp), 1(Long), 图片2(String), null, 1(Integer), 2019-07-21 13:14:07.876(Timestamp), 1(Long)
2019-07-21 13:14:07.990 [main] DEBUG c.J.o2o.dao.ProductImgDao.batchInsertProductImg - <==    Updates: 2
2019-07-21 13:14:38.310 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductImgDao.deleteProductImgByProductId] use [master] Strategy, SqlCommanType [DELETE]..
2019-07-21 13:14:38.312 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：master
2019-07-21 13:14:38.325 [main] DEBUG c.J.o.d.ProductImgDao.deleteProductImgByProductId - ==>  Preparing: DELETE FROM tb_product_img WHERE product_id = ? 
2019-07-21 13:14:38.348 [main] DEBUG c.J.o.d.ProductImgDao.deleteProductImgByProductId - ==> Parameters: 1(Long)
2019-07-21 13:14:38.406 [main] DEBUG c.J.o.d.ProductImgDao.deleteProductImgByProductId - <==    Updates: 2
2019-07-21 13:18:25.136 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductImgDao.batchInsertProductImg] use [master] Strategy, SqlCommanType [INSERT]..
2019-07-21 13:18:25.137 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：master
2019-07-21 13:18:25.169 [main] DEBUG c.J.o2o.dao.ProductImgDao.batchInsertProductImg - ==>  Preparing: INSERT INTO tb_product_img ( img_addr, img_desc, priority, create_time, product_id ) VALUES ( ?, ?, ?, ?, ? ) , ( ?, ?, ?, ?, ? ) 
2019-07-21 13:18:25.192 [main] DEBUG c.J.o2o.dao.ProductImgDao.batchInsertProductImg - ==> Parameters: 图片1(String), 测试图片1(String), 1(Integer), 2019-07-21 13:18:25.119(Timestamp), 1(Long), 图片2(String), null, 1(Integer), 2019-07-21 13:18:25.119(Timestamp), 1(Long)
2019-07-21 13:18:25.244 [main] DEBUG c.J.o2o.dao.ProductImgDao.batchInsertProductImg - <==    Updates: 2
2019-07-21 13:18:25.266 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductDao.queryProductById] use [slave] Strategy, SqlCommanType [SELECT]..
2019-07-21 13:18:25.266 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：slave
2019-07-21 13:18:25.267 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductById - ==>  Preparing: SELECT p.product_id, p.product_name, p.product_desc, p.img_addr, p.normal_price, p.promotion_price, p.priority, p.create_time, p.last_edit_time, p.enable_status, p.product_category_id, p.shop_id, pm.product_img_id, pm.img_addr AS detail_img, pm.img_desc, pm.priority, pm.create_time FROM tb_product p LEFT JOIN tb_product_img pm ON p.product_id = pm.product_id WHERE p.product_id = ? ORDER BY pm.priority DESC 
2019-07-21 13:18:25.285 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductById - ==> Parameters: 1(Long)
2019-07-21 13:18:25.329 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductById - <==      Total: 2
2019-07-21 13:18:25.336 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductImgDao.deleteProductImgByProductId] use [master] Strategy, SqlCommanType [DELETE]..
2019-07-21 13:18:25.336 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：master
2019-07-21 13:18:25.336 [main] DEBUG c.J.o.d.ProductImgDao.deleteProductImgByProductId - ==>  Preparing: DELETE FROM tb_product_img WHERE product_id = ? 
2019-07-21 13:18:25.337 [main] DEBUG c.J.o.d.ProductImgDao.deleteProductImgByProductId - ==> Parameters: 1(Long)
2019-07-21 13:18:25.378 [main] DEBUG c.J.o.d.ProductImgDao.deleteProductImgByProductId - <==    Updates: 2
2019-07-21 13:18:47.123 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductDao.updateProduct] use [master] Strategy, SqlCommanType [UPDATE]..
2019-07-21 13:18:47.124 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：master
2019-07-21 13:18:47.161 [main] DEBUG com.JunWang.o2o.dao.ProductDao.updateProduct - ==>  Preparing: UPDATE tb_product SET product_name=?, product_category_id=? WHERE product_id = ? AND shop_id=? 
2019-07-21 13:18:47.184 [main] DEBUG com.JunWang.o2o.dao.ProductDao.updateProduct - ==> Parameters: 第二个产品(String), 2(Long), 1(Long), 1(Long)
2019-07-21 13:18:47.303 [main] DEBUG com.JunWang.o2o.dao.ProductDao.updateProduct - <==    Updates: 1
2019-07-21 15:13:07.298 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductDao.queryProductById] use [master] Strategy, SqlCommanType [SELECT]..
2019-07-21 15:13:07.299 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：master
2019-07-21 15:13:07.308 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductById - ==>  Preparing: SELECT p.product_id, p.product_name, p.product_desc, p.img_addr, p.normal_price, p.promotion_price, p.priority, p.create_time, p.last_edit_time, p.enable_status, p.product_category_id, p.shop_id, pm.product_img_id, pm.img_addr AS detail_img, pm.img_desc, pm.priority, pm.create_time FROM tb_product p LEFT JOIN tb_product_img pm ON p.product_id = pm.product_id WHERE p.product_id = ? ORDER BY pm.priority DESC 
2019-07-21 15:13:07.331 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductById - ==> Parameters: 1(Long)
2019-07-21 15:13:07.356 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductById - <==      Total: 1
2019-07-21 15:13:07.375 [main] DEBUG com.JunWang.o2o.util.ImageUtil - current relativeAddr is:upload\item\shop\1\2019072115130723576.png
2019-07-21 15:13:07.375 [main] DEBUG com.JunWang.o2o.util.ImageUtil - current complete addr is:G:\image\upload\item\shop\1\2019072115130723576.png
2019-07-21 15:13:07.375 [main] DEBUG com.JunWang.o2o.util.ImageUtil - basePath is:/G:/O2Oproject/o2o/target/test-classes/
2019-07-21 15:13:07.605 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductImgDao.queryProductImgList] use [master] Strategy, SqlCommanType [SELECT]..
2019-07-21 15:13:07.605 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：master
2019-07-21 15:13:07.605 [main] DEBUG c.J.o2o.dao.ProductImgDao.queryProductImgList - ==>  Preparing: SELECT product_img_id, img_addr, img_desc, priority, create_time, product_id FROM tb_product_img WHERE product_id=? ORDER BY product_img_id ASC 
2019-07-21 15:13:07.606 [main] DEBUG c.J.o2o.dao.ProductImgDao.queryProductImgList - ==> Parameters: 1(Long)
2019-07-21 15:13:07.607 [main] DEBUG c.J.o2o.dao.ProductImgDao.queryProductImgList - <==      Total: 0
2019-07-21 15:13:07.608 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductImgDao.deleteProductImgByProductId] use [master] Strategy, SqlCommanType [DELETE]..
2019-07-21 15:13:07.608 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：master
2019-07-21 15:13:07.608 [main] DEBUG c.J.o.d.ProductImgDao.deleteProductImgByProductId - ==>  Preparing: DELETE FROM tb_product_img WHERE product_id = ? 
2019-07-21 15:13:07.608 [main] DEBUG c.J.o.d.ProductImgDao.deleteProductImgByProductId - ==> Parameters: 1(Long)
2019-07-21 15:13:07.609 [main] DEBUG c.J.o.d.ProductImgDao.deleteProductImgByProductId - <==    Updates: 0
2019-07-21 15:13:07.610 [main] DEBUG com.JunWang.o2o.util.ImageUtil - current relativeAddr is :upload\item\shop\1\2019072115130796858.jpg
2019-07-21 15:13:07.610 [main] DEBUG com.JunWang.o2o.util.ImageUtil - current complete addr is:G:\image\upload\item\shop\1\2019072115130796858.jpg
2019-07-21 15:13:07.654 [main] DEBUG com.JunWang.o2o.util.ImageUtil - current relativeAddr is :upload\item\shop\1\2019072115130713794.jpg
2019-07-21 15:13:07.655 [main] DEBUG com.JunWang.o2o.util.ImageUtil - current complete addr is:G:\image\upload\item\shop\1\2019072115130713794.jpg
2019-07-21 15:13:07.699 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductImgDao.batchInsertProductImg] use [master] Strategy, SqlCommanType [INSERT]..
2019-07-21 15:13:07.699 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：master
2019-07-21 15:13:07.716 [main] DEBUG c.J.o2o.dao.ProductImgDao.batchInsertProductImg - ==>  Preparing: INSERT INTO tb_product_img ( img_addr, img_desc, priority, create_time, product_id ) VALUES ( ?, ?, ?, ?, ? ) , ( ?, ?, ?, ?, ? ) 
2019-07-21 15:13:07.719 [main] DEBUG c.J.o2o.dao.ProductImgDao.batchInsertProductImg - ==> Parameters: upload\item\shop\1\2019072115130796858.jpg(String), null, null, 2019-07-21 15:13:07.654(Timestamp), 1(Long), upload\item\shop\1\2019072115130713794.jpg(String), null, null, 2019-07-21 15:13:07.698(Timestamp), 1(Long)
2019-07-21 15:13:07.720 [main] DEBUG c.J.o2o.dao.ProductImgDao.batchInsertProductImg - <==    Updates: 2
2019-07-21 15:13:07.721 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductDao.updateProduct] use [master] Strategy, SqlCommanType [UPDATE]..
2019-07-21 15:13:07.721 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：master
2019-07-21 15:13:07.731 [main] DEBUG com.JunWang.o2o.dao.ProductDao.updateProduct - ==>  Preparing: UPDATE tb_product SET product_name=?, product_desc=?, img_addr=?, last_edit_time=?, product_category_id=? WHERE product_id = ? AND shop_id=? 
2019-07-21 15:13:07.731 [main] DEBUG com.JunWang.o2o.dao.ProductDao.updateProduct - ==> Parameters: 正式的商品(String), 正式的商品(String), upload\item\shop\1\2019072115130723576.png(String), 2019-07-21 15:13:07.285(Timestamp), 1(Long), 1(Long), 1(Long)
2019-07-21 15:13:07.733 [main] DEBUG com.JunWang.o2o.dao.ProductDao.updateProduct - <==    Updates: 1
2019-07-21 15:50:24.970 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductDao.queryProductList] use [slave] Strategy, SqlCommanType [SELECT]..
2019-07-21 15:50:24.972 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：slave
2019-07-21 15:50:24.985 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductList - ==>  Preparing: SELECT product_id, product_name, product_desc, img_addr, normal_price, promotion_price, priority, create_time, last_edit_time, enable_status, product_category_id, shop_id FROM tb_product ORDER BY priority DESC LIMIT ?, ?; 
2019-07-21 15:50:25.054 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductList - ==> Parameters: 0(Integer), 3(Integer)
2019-07-21 15:50:25.085 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductList - <==      Total: 3
2019-07-21 15:50:25.091 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductDao.queryProductCount] use [slave] Strategy, SqlCommanType [SELECT]..
2019-07-21 15:50:25.092 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：slave
2019-07-21 15:50:25.092 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductCount - ==>  Preparing: SELECT count(1) FROM tb_product 
2019-07-21 15:50:25.092 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductCount - ==> Parameters: 
2019-07-21 15:50:25.094 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductCount - <==      Total: 1
2019-07-21 15:50:25.096 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductDao.queryProductList] use [slave] Strategy, SqlCommanType [SELECT]..
2019-07-21 15:50:25.097 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：slave
2019-07-21 15:50:25.097 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductList - ==>  Preparing: SELECT product_id, product_name, product_desc, img_addr, normal_price, promotion_price, priority, create_time, last_edit_time, enable_status, product_category_id, shop_id FROM tb_product WHERE product_name like '%测试%' ORDER BY priority DESC LIMIT ?, ?; 
2019-07-21 15:50:25.098 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductList - ==> Parameters: 0(Integer), 3(Integer)
2019-07-21 15:50:25.100 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductList - <==      Total: 2
2019-07-21 15:53:27.466 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductDao.queryProductList] use [slave] Strategy, SqlCommanType [SELECT]..
2019-07-21 15:53:27.467 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：slave
2019-07-21 15:53:27.482 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductList - ==>  Preparing: SELECT product_id, product_name, product_desc, img_addr, normal_price, promotion_price, priority, create_time, last_edit_time, enable_status, product_category_id, shop_id FROM tb_product ORDER BY priority DESC LIMIT ?, ?; 
2019-07-21 15:53:27.538 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductList - ==> Parameters: 0(Integer), 3(Integer)
2019-07-21 15:53:27.563 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductList - <==      Total: 3
2019-07-21 15:53:27.570 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductDao.queryProductCount] use [slave] Strategy, SqlCommanType [SELECT]..
2019-07-21 15:53:27.570 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：slave
2019-07-21 15:53:27.570 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductCount - ==>  Preparing: SELECT count(1) FROM tb_product 
2019-07-21 15:53:27.571 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductCount - ==> Parameters: 
2019-07-21 15:53:27.572 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductCount - <==      Total: 1
2019-07-21 15:53:27.574 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductDao.queryProductList] use [slave] Strategy, SqlCommanType [SELECT]..
2019-07-21 15:53:27.574 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：slave
2019-07-21 15:53:27.575 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductList - ==>  Preparing: SELECT product_id, product_name, product_desc, img_addr, normal_price, promotion_price, priority, create_time, last_edit_time, enable_status, product_category_id, shop_id FROM tb_product WHERE product_name like '%测试%' ORDER BY priority DESC LIMIT ?, ?; 
2019-07-21 15:53:27.575 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductList - ==> Parameters: 0(Integer), 3(Integer)
2019-07-21 15:53:27.577 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductList - <==      Total: 2
2019-07-21 15:53:27.578 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductDao.queryProductCount] use [slave] Strategy, SqlCommanType [SELECT]..
2019-07-21 15:53:27.578 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：slave
2019-07-21 15:53:27.578 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductCount - ==>  Preparing: SELECT count(1) FROM tb_product WHERE product_name like '%测试%' 
2019-07-21 15:53:27.578 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductCount - ==> Parameters: 
2019-07-21 15:53:27.579 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductCount - <==      Total: 1
2019-07-21 15:54:59.170 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductDao.queryProductList] use [slave] Strategy, SqlCommanType [SELECT]..
2019-07-21 15:54:59.172 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：slave
2019-07-21 15:54:59.187 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductList - ==>  Preparing: SELECT product_id, product_name, product_desc, img_addr, normal_price, promotion_price, priority, create_time, last_edit_time, enable_status, product_category_id, shop_id FROM tb_product ORDER BY priority DESC LIMIT ?, ?; 
2019-07-21 15:54:59.247 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductList - ==> Parameters: 0(Integer), 3(Integer)
2019-07-21 15:54:59.270 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductList - <==      Total: 3
2019-07-21 15:54:59.279 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductDao.queryProductCount] use [slave] Strategy, SqlCommanType [SELECT]..
2019-07-21 15:54:59.280 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：slave
2019-07-21 15:54:59.280 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductCount - ==>  Preparing: SELECT count(1) FROM tb_product 
2019-07-21 15:54:59.280 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductCount - ==> Parameters: 
2019-07-21 15:54:59.282 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductCount - <==      Total: 1
2019-07-21 15:54:59.282 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductDao.queryProductCount] use [slave] Strategy, SqlCommanType [SELECT]..
2019-07-21 15:54:59.282 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：slave
2019-07-21 15:54:59.283 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductCount - ==>  Preparing: SELECT count(1) FROM tb_product 
2019-07-21 15:54:59.283 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductCount - ==> Parameters: 
2019-07-21 15:54:59.284 [main] DEBUG com.JunWang.o2o.dao.ProductDao.queryProductCount - <==      Total: 1
2019-07-21 19:23:21.824 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductDao.updateProductCategoryToNull] use [master] Strategy, SqlCommanType [UPDATE]..
2019-07-21 19:23:21.825 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：master
2019-07-21 19:23:21.842 [main] DEBUG c.J.o2o.dao.ProductDao.updateProductCategoryToNull - ==>  Preparing: UPDATE tb_product SET product_category_id = null WHERE product_category_id = ? 
2019-07-21 19:23:21.866 [main] DEBUG c.J.o2o.dao.ProductDao.updateProductCategoryToNull - ==> Parameters: 2(Long)
2019-07-21 19:23:21.869 [main] DEBUG c.J.o2o.dao.ProductDao.updateProductCategoryToNull - <==    Updates: 0
2019-07-21 19:24:22.501 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ProductDao.updateProductCategoryToNull] use [master] Strategy, SqlCommanType [UPDATE]..
2019-07-21 19:24:22.502 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：master
2019-07-21 19:24:22.516 [main] DEBUG c.J.o2o.dao.ProductDao.updateProductCategoryToNull - ==>  Preparing: UPDATE tb_product SET product_category_id = null WHERE product_category_id = ? 
2019-07-21 19:24:22.539 [main] DEBUG c.J.o2o.dao.ProductDao.updateProductCategoryToNull - ==> Parameters: 2(Long)
2019-07-21 19:24:22.578 [main] DEBUG c.J.o2o.dao.ProductDao.updateProductCategoryToNull - <==    Updates: 1
2019-07-21 20:40:42.130 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.HeadLineDao.queryHeadLine] use [slave] Strategy, SqlCommanType [SELECT]..
2019-07-21 20:40:42.131 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：slave
2019-07-21 20:40:42.147 [main] DEBUG com.JunWang.o2o.dao.HeadLineDao.queryHeadLine - ==>  Preparing: SELECT line_id, line_name, line_link, line_img, priority, enable_status, create_time, last_edit_time, FROM tb_head_line ORDER BY priority DESC 
2019-07-21 20:40:42.217 [main] DEBUG com.JunWang.o2o.dao.HeadLineDao.queryHeadLine - ==> Parameters: 
2019-07-21 20:42:15.018 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.HeadLineDao.queryHeadLine] use [slave] Strategy, SqlCommanType [SELECT]..
2019-07-21 20:42:15.020 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：slave
2019-07-21 20:42:15.038 [main] DEBUG com.JunWang.o2o.dao.HeadLineDao.queryHeadLine - ==>  Preparing: SELECT line_id, line_name, line_link, line_img, priority, enable_status, create_time, last_edit_time FROM tb_head_line ORDER BY priority DESC 
2019-07-21 20:42:15.122 [main] DEBUG com.JunWang.o2o.dao.HeadLineDao.queryHeadLine - ==> Parameters: 
2019-07-21 20:42:15.152 [main] DEBUG com.JunWang.o2o.dao.HeadLineDao.queryHeadLine - <==      Total: 1
2019-07-21 20:50:08.604 [main] DEBUG c.J.o2o.dao.split.DynamicDataSourceInterceptor - 设置方法[com.JunWang.o2o.dao.ShopCategoryDao.queryShopCategory] use [slave] Strategy, SqlCommanType [SELECT]..
2019-07-21 20:50:08.605 [main] DEBUG com.JunWang.o2o.dao.split.DynamicDataSourceHolder - 所使用的的数据源是：slave
2019-07-21 20:50:08.620 [main] DEBUG c.J.o2o.dao.ShopCategoryDao.queryShopCategory - ==>  Preparing: SELECT shop_category_id, shop_category_name, shop_category_desc, shop_category_img, priority, create_time, last_edit_time, parent_id FROM tb_shop_category WHERE parent_id is null ORDER BY priority DESC 
2019-07-21 20:50:08.703 [main] DEBUG c.J.o2o.dao.ShopCategoryDao.queryShopCategory - ==> Parameters: 
2019-07-21 20:50:08.737 [main] DEBUG c.J.o2o.dao.ShopCategoryDao.queryShopCategory - <==      Total: 1
